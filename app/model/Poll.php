<?phpclass Poll {		static $instance;		private $_db, $_tpl;	private $_table 			=	"poll";	private $_table_question	=	"poll_question";	private $_table_answer 		=	"poll_answer";	private $_table_result		=	"poll_result";	private $_table_user		=	"poll_user";		public static function getInstance()	{		if (!isset($instance)) {			$c = __CLASS__;			$instance = new $c;		}		return $instance;	}	public function __construct()	{		global	$tpl;		$this->_tpl			=&	$tpl;		$this->_db			=&	DB::getInstance();	}		public function getRecords($data = array())	{		$out = array();		$where = array();		if (isset($data['active'])) {			$where[] = "t1.`active` = '{$data['active']}'";		}		$where = empty($where) ? '' : "WHERE " . implode(" AND ", $where);		$limit = '';		if (isset($data['page']) && isset($data['items_per_page'])) {			$count = $data['items_per_page'];			$start = $data['page'] * $data['items_per_page'];			$limit = "LIMIT $start, $count";		}		$q = "		SELECT t1.*		FROM `{$this->_table}` t1		$where		ORDER by t1.`id` DESC		$limit		;";		//dump($q);		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			while ($o = $r->fetch_object()) {				$out[] = $o;			}			$r->free();		}		return $out;	}		public function get($data)	{		$out ='';		$q = "		SELECT *		FROM `{$this->_table}`		WHERE t1.`id` = {$data['id']}		LIMIT 1		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$out = $r->fetch_object();			$r->free();		}		return $out;	}	/*public function reset_votes ($poll_id) {				$status = FALSE;		if($poll_id && $poll_id > 0) {			// removing from results			$q = "";			$this->db->where("poll_id = " . $poll_id );			$this->db->delete( $this->_table_results );			$status = $this->db->affected_rows() > 0 ? TRUE : FALSE;			// removing from `users`			$this->db->where("poll_id = " . $poll_id );			$this->db->delete( $this->_table_users );			$status = $this->db->affected_rows() > 0 ? TRUE : FALSE;		}else{			$status = FALSE;		}		return $status;	}*/		function activateRecord($id)	{		$q = "		UPDATE `{$this->_table}`		SET		`active`	=	1		WHERE	`id` = $id		LIMIT 1		;";		$this->_db->q($q);		return $this->_db->affected_rows > 0 ? TRUE : FALSE;	}		function deactivateRecord($id)	{		$q = "		UPDATE `{$this->_table}`		SET		`active`	=	0		WHERE	`id` = $id		LIMIT 1		;";		$this->_db->q($q);		return $this->_db->affected_rows > 0 ? TRUE : FALSE;	}		public function insertRecord($data = array())	{		/*$temp = array(			"active"	=>	0		);		$this->db->insert( $this->_table, $temp );		$id = $this->db->insert_id();		foreach( $this->lang_list as $item )		{			$arr = array(				"id"		=>	$id,				"code"		=>	$item,				"title"		=>	"n/a",				"content"	=>	"<p>n/a</p>"			);			$this->db->set("created", "now()", FALSE );			$this->db->insert( $this->_table_lang, $arr );		}		return $id;*/	}		public function createTemp()	{		$q = "		INSERT INTO `{$this->_table}`		SET `active` = 0		";		$this->_db->q($q);		return $this->_db->insert_id;		/*$temp = array(			"active"	=>	0		);		$this->db->insert( $this->_table, $temp );		$id = $this->db->insert_id();		foreach( $this->lang_list as $item )		{			$arr = array(				"id"		=>	$id,				"code"		=>	$item,				"title"		=>	"n/a",				"content"	=>	"<p>n/a</p>"			);			$this->db->set("created", "now()", FALSE );			$this->db->insert( $this->_table_lang, $arr );		}		return $id;*/	}	public function updateRecord($data = array())	{		$q = "		UPDATE	`{$this->_table}`		SET		`title`		=	\"{$data['title']}\",				`content`	=	\"{$data['content']}\"		WHERE	`id`		=	{$data['id']}		;";		//dump($q);		$this->_db->q($q);		return true;	}		public function removeRecord ($id = NULL)	{		$q = "		DELETE FROM `{$this->_table}`		WHERE `id` = $id		";		$this->_db->q($q);			}	/*	in:	(array) where parameters	out: array	*/	/* 	in: array data | int id, string vector / up, down	$data = array(		"id"	=>	1,		"vector"	=>	"up"	out: (bool)	*/	private function getItem( $id )	{		/*$this->db->where("id", $id );		$r = $this->db->get( $this->_table);		if( $r->num_rows() == 1 )		{			$o = $r->result();			return $o[0];		}*/	}	public function getItemList()	{		$out = array();		$this->db->order_by("id", "desc");		$r = $this->db->get( $this->_table );		if( $r->num_rows() > 0 )		{			foreach( $r->result() as $item )			{				$item->thumb = $this->media->getItemMediaList( $item->id, 6, 1 );				$out[] = $item;			}		};		return $out;	}		public function getComplex ($id)	{		$out ='';		$q = "		SELECT *		FROM `{$this->_table}` t1		WHERE t1.`id` = {$id}		LIMIT 1		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$out = $r->fetch_object();			$out->question = $this->getQuestionRecords(				array (					"id"	=>	$id				)			);			if (sizeof($out->question) > 0) {				foreach($out->question as $question) {					$question->answer = $this->getAnswerRecords(						array (							"poll_id" 		=>	$id,							"question_id"	=>	$question->id						)					);				}			}			$r->free();		}				return $out;	}	/* questions */	public function getQuestionRecords($data = array())	{		$out = array();		$q = "		SELECT t1.*		FROM `{$this->_table_question}` t1		WHERE t1.`poll_id` = {$data['id']}		ORDER BY t1.`ord` ASC		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			while ($o = $r->fetch_object()) {				$out[] = $o;				//if( !isset( $out[$item->id]->answers ) ) {					//$out[$item->id]->answers = $this->getAnswers( $poll_id, $item->id );				//}			}			$r->free();		}		return $out;	}	/* answers */	public function getAnswerRecords($data)	{		$out = array();		$q = "		SELECT t1.*		FROM `{$this->_table_answer}` t1		WHERE t1.`poll_id` = {$data['poll_id']} AND t1.`question_id` = {$data['question_id']}		ORDER BY t1.`ord` ASC		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			while ($o = $r->fetch_object()) {				$out[] = $o;			}			$r->free();		}		return $out;	}	/* get poll max id */	public function getQuestionMaxId($poll_id)	{		$max = 0;		$q = "		SELECT MAX(`id`) as `max` 		FROM `{$this->_table_question}`		WHERE `poll_id` = $poll_id		LIMIT 1		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$o = $r->fetch_object();			$max = $o->max;			$r->free();		}		return $max;	}		/* get answer max id */	public function getAnswerMaxId ($data)	{		$max = 0;		$q = "		SELECT MAX(`id`) as `max`		FROM `{$this->_table_answer}` 		WHERE `poll_id` = {$data['poll_id']} AND `question_id` = {$data['question_id']}		LIMIT 1		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$o = $r->fetch_object();			$max = $o->max;			$r->free();		}		return $max;	}	/* get poll max order */	public function getQuestionMaxOrder($poll_id)	{		$max = 0;		$q = "		SELECT MAX(`ord`) as `max`		FROM `{$this->_table_question}`		WHERE `poll_id` = $poll_id		LIMIT 1		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$o = $r->fetch_object();			$max = $o->max;			$r->free();		}		return $max;	}	/* get poll max order */	public function getAnswerMaxOrder($data)	{		$max = 0;		$q = "		SELECT MAX(`order`) as `max` 		FROM `{$this->_table_answer}`		WHERE `poll_id` = {$data['poll_id']} AND `question_id` = {$data['question_id']}		LIMIT 1		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$o = $r->fetch_object();			$max = (int) $o->max;			$r->free();		}		return $max;	}	/**	 * Add Question Record	 */	public function addQuestionRecord($data)	{		$question_id 	=	$this->getQuestionMaxId($data['poll_id'])+1;		$ord			=	$this->getQuestionMaxOrder($data['poll_id'])+1;		$q = "		INSERT INTO `{$this->_table_question}`		SET		`id` 		=	$question_id,				`poll_id`	=	{$data['poll_id']},				`title`		=	\"{$data['title']}\",				`active`	=	0,				`ord`		=	$ord		;";		$this->_db->q($q);		return TRUE;	}	/**	 * Edit Question Record	 */	public function editQuestionRecord($data)	{		$q = "		UPDATE `{$this->_table_question}`		SET		`title`		=	\"{$data['title']}\"		WHERE `poll_id` = {$data['poll_id']} AND `id` = {$data['id']}		;";		$this->_db->q($q);		return TRUE;	}	/* remove question */	public function removeQuestionRecord($data)	{		$q = "		DELETE FROM `{$this->_table_question}`		WHERE	`poll_id` = {$data['poll_id']} AND `id` = {$data['question_id']}		;";		$this->_db->q($q);		$state1 = $this->_db->affected_rows > 0 ? TRUE : FALSE;		$q = "		DELETE FROM `{$this->_table_answer}`		WHERE	`poll_id` = {$data['poll_id']} AND `question_id` = {$data['question_id']}		;";		$this->_db->q($q);		$state2 = $this->_db->affected_rows > 0 ? TRUE : FALSE;		return TRUE;	}	/* add answer */	public function addAnswerRecord ($data)	{				$answer_id	=	$this->getAnswerMaxId($data) + 1;		$ord		=	$this->getAnswerMaxOrder($data) + 1;		$q = "		INSERT INTO `{$this->_table_answer}`		SET		`id`			=	$answer_id,				`poll_id`		=	{$data['poll_id']},				`question_id`	=	{$data['question_id']},					`title`			=	\"{$data['title']}\",				`active`		=	0,				`ord`			=	$ord		;";		$this->_db->q($q);		return TRUE;	}	/**	 * Update Answer Record	 */	public function updateAnswerRecord($data)	{				$q = "		UPDATE `{$this->_table_answer}`		SET		`title`			=	\"{$data['title']}\"		WHERE `id` = {$data['id']} AND `poll_id` = {$data['poll_id']} AND `question_id` = {$data['question_id']}		;";		$this->_db->q($q);		return TRUE;	}		/* remove answer */	public function removeAnswerRecord ($data)	{		$q = "		DELETE FROM `{$this->_table_answer}`		WHERE	`poll_id`	=	{$data['poll_id']} AND `question_id` = {$data['question_id']} AND `id` = {$data['id']}		LIMIT 1		;";		$this->_db->q($q);		$this->_fixAnswerOrder($data);		return TRUE;	}	/* fix answer order */	private function _fixAnswerOrder ($data) {			}	/* vote */	public function vote ($data){		/* user insert */		$user = array(			"poll_id"	=>	$data["poll_id"],			"lang_id"	=>	$data["lang_id"],			"first_name"=>	$data["first_name"],			"email"		=>	$data["email"]		);		$q = "		INSERT INTO `{$this->_table_user}`		SET			`poll_id`	= {$data['poll_id']}, `lang_id` = {$data['lang_id']},					`name`		=	\"{$data["first_name"]}\", `email`	=	\"{$data['email']}\"		;";		$this->_db->q($q);		/* votes insert */		foreach ($data["votes"] as $vote) {			$vote["user_id"] = 0;			$q = "			INSERT INTO `{$this->_table_result}`			SET		`ip`			=	\"{$vote['ip']}\",					`user_id`		=	{$vote['user_id']},					`poll_id`		=	{$vote['poll_id']},					`question_id`	=	{$vote['question_id']},					`answer_id`		=	{$vote['answer_id']},					`posted`		=	NOW()			;";			$this->_db->q($q);		}		return TRUE;	}	/* check user voting status */	public function user_has_voted ($data)	{		$state = FALSE;		$q = "		SELECT COUNT(*) as `total`		FROM `{$this->_table_user}`		WHERE `email` = \"{$data['email']}\" AND `lang_id` = 1 AND `poll_id` = {$data['poll_id']}		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$o = $r->fetch_object();			$state = $o->total > 0 ? TRUE : FALSE;			$r->free();		}		return $state;			}	/* public function getAnswer */	public function getAnswerRecord($data) {		$out = '';		$q = "		SELECT `title`		FROM `{$this->_table_answer}`		WHERE `poll_id` = {$data['poll_id']} AND `lang_id` = 1 AND `id` = {$data['question_id']}		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows() > 0) {			$o = $r->fetch_object();			$out = $o->title;			$r->free();		}		return $out;	}	/* public function */	public function getResults ($data) {		$out = array();		$q = "		SELECT *		FROM `{$this->_table_result}`		WHERE `poll_id` = {$data['poll_id']}		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows) {			while ($o = $r->fetch_object()) {				$out[] = $o;			}			$r->free();		}		return $out;	}	/* get total votes for a single poll and language */	public function getTotalVoters ($data)	{		$total = 0;		$q = "		SELECT COUNT( DISTINCT(`user_id`) ) as `total`		FROM `{$this->_table_result}`		WHERE `poll_id` = {$data['poll_id']}		LIMIT 1		;";		$q = "		SELECT COUNT(`user_id`) as `total`		FROM `{$this->_table_result}`		WHERE `poll_id` = {$data['poll_id']}		LIMIT 1		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows) {			$o = $r->fetch_object();			$total = (int) $o->total;			$r->free();		}		return $total;	}	public function getTotal() {		$total = 0;		$q = "		SELECT COUNT(*) as `total`		FROM `{$this->_table}`		;";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			$o = $r->fetch_object();			$total = $o->total;			$r->free();		}		return $total;	}		public function getUserList()	{		$list = array();		$q = "		SELECT `name`, `email`		FROM `{$this->_table_user}`		GROUP BY `email`		";		$r = $this->_db->q($q);		if (@$r && $r->num_rows > 0) {			while ($o = $r->fetch_object()) {				$list[] = $o;			}			$r->free();		}		return $list;	}}